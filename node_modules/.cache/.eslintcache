[{"/Users/peko/Desktop/quizzical/src/index.js":"1","/Users/peko/Desktop/quizzical/src/App.js":"2","/Users/peko/Desktop/quizzical/src/component/Cover.js":"3","/Users/peko/Desktop/quizzical/src/component/Quiz.js":"4"},{"size":529,"mtime":1673352431620,"results":"5","hashOfConfig":"6"},{"size":3160,"mtime":1675834765351,"results":"7","hashOfConfig":"6"},{"size":335,"mtime":1673271240714,"results":"8","hashOfConfig":"6"},{"size":1926,"mtime":1675350134108,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"114agwg",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/peko/Desktop/quizzical/src/index.js",["25"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { decode } from 'html-entities';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","/Users/peko/Desktop/quizzical/src/App.js",["26"],[],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Cover from './component/Cover';\nimport Quiz from './component/Quiz';\nimport { nanoid } from 'nanoid';\nimport { decode } from 'html-entities';\nimport { queries } from '@testing-library/react';\n\n\n\n// url : https://opentdb.com/api.php?amount=10&category=9\n\nfunction App() {\n  const [quizData, setQuizData] = useState({})\n  const [startQuiz, setStartQuiz] = useState(false)\n  const [showScore, setShowScore] = useState(false)\n  const [score, setScore] = useState(0)\n  const [allCheck, setAllCheck] = useState(true)\n\n  const url = \"https://opentdb.com/api.php?amount=10\"\n  const shuffleArray = (arr) => arr.sort(()=> Math.random() - 0.5)\n\n\n  useEffect(()=>{\n    async function getData(){\n      const res = await fetch(url)\n      const data = await res.json()\n      let quizList = []\n      data.results.forEach(question => {\n        quizList.push({id:nanoid(), question: decode(question.question), correct_answer: decode(question.correct_answer), selected: null, checked: false, answers: shuffleArray([...decode(question.incorrect_answers), decode(question.correct_answer)])})\n      })\n      setQuizData(quizList)\n    }\n    getData()\n  },[ ])\n\n\n\n  function start(){\n    setStartQuiz(true)\n  }\n\n\n  function handleClickAnswer(id, answer){\n    setQuizData(questions => questions.map(question => {\n      return question.id === id ? {...question, selected: answer, checked: true} : question\n    }))\n  }\n\n  function checkScore(){\n    let checked = null\n    quizData.forEach(questions => {\n        if(questions.selected){\n          return questions.selected === questions.correct_answer ? setScore(prevScore=> prevScore+1) : score\n        }else{\n          checked = false\n        }\n    })\n    if(checked === false){\n      setAllCheck(false)\n    }else if(checked === null){\n      setShowScore(prev => !prev)\n    }\n  }\n  \n  function playAgain(){\n    setQuizData(questions => questions.map(question => {\n      return {...question, selected: null, checked: false}\n    }))\n    setScore(0)\n    setShowScore(prev => !prev)\n    setStartQuiz(prev => !prev)\n    setAllCheck(true)\n  }\n\n  for(let i =0; i < quizData.length; i++){\n    console.log(quizData[i].correct_answer)\n  }\n  console.log(score)\n  return ( quizData.length > 0 ? (\n    <main>\n      <div className=\"container\">\n        <div className=\"bg-yellow-block\"></div>\n          {startQuiz ? \n          <Quiz \n            quizData={quizData} \n            showScore={showScore} \n            handleClickAnswer={handleClickAnswer}\n            score={score}\n            checkScore={checkScore}\n            playAgain={playAgain}\n            allCheck={allCheck}\n          /> \n          : <Cover start={start}/>}\n        <div className=\"bg-blue-block\"></div>\n      </div>\n    </main>\n  ) : (\n    <main>\n        <div className='container'>\n          <div className=\"bg-yellow-block\"></div>\n          <div className='load'>\n            <h1>Loading...</h1>\n            <p>If the page is loading too slow, please reload the page.</p>\n          </div>\n          <div className=\"bg-blue-block\"></div>\n        </div>\n    </main>\n  )  \n  )\n}\n\nexport default App;\n","/Users/peko/Desktop/quizzical/src/component/Cover.js",[],[],"/Users/peko/Desktop/quizzical/src/component/Quiz.js",["27","28"],[],"import React from 'react';\nimport { decode } from 'html-entities';\nimport { nanoid } from 'nanoid';\n\n\n\nexport default function Quiz(props){\n    \n\n\n    const quizes = props.quizData.map(item => {\n        \n        return(\n            <div className='quiz-container'>\n                <h2 className='quiz-question'>{item.question}</h2>\n                <div className='quiz-ans-container'>\n                    {item.answers.map(ans => \n                    <button \n                        onClick={()=>props.handleClickAnswer(item.id, ans)} \n                        className={`${ props.showScore ?  \n                        ans === item.correct_answer ? \"quiz-ans correct_ans\" :\n                            ans === item.selected && ans !== item.correct_answer ? \"quiz-ans incorrect_ans\" : \"quiz-ans other_incorrect_ans\"\n                        : \n                        item.selected === ans ? \"quiz-ans selected\" : \"quiz-ans\" }`} \n                        // className={item.selected === ans ? \"quiz-ans selected\" : \"quiz-ans\"} \n                    >\n                        {ans}\n                    </button>)}\n                </div>\n                <hr />\n            </div>\n        )\n    })\n    console.log(props.allCheck)\n\n    return(\n        <div className='quizes-container'>\n            {quizes}\n            \n            {props.showScore ? \n            <div className='quiz-score-container'>\n                <h3>You scored {props.score}/10 correct answer</h3>\n                <button className=\"btn\" onClick={props.playAgain}>Play again</button>\n            </div> : \n            <div className='quiz-check-answer-container'>\n                <button className='btn' onClick={props.checkScore}>Check Answer</button>\n                {/* check if every question is answered */}\n                {props.allCheck === false && <p>*** Please answer every question ***</p>}\n            </div>\n            }\n        </div>\n    )\n}\n",{"ruleId":"29","severity":1,"message":"30","line":5,"column":10,"nodeType":"31","messageId":"32","endLine":5,"endColumn":16},{"ruleId":"29","severity":1,"message":"33","line":7,"column":10,"nodeType":"31","messageId":"32","endLine":7,"endColumn":17},{"ruleId":"29","severity":1,"message":"30","line":2,"column":10,"nodeType":"31","messageId":"32","endLine":2,"endColumn":16},{"ruleId":"29","severity":1,"message":"34","line":3,"column":10,"nodeType":"31","messageId":"32","endLine":3,"endColumn":16},"no-unused-vars","'decode' is defined but never used.","Identifier","unusedVar","'queries' is defined but never used.","'nanoid' is defined but never used."]