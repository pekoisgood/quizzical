[{"/Users/peko/Desktop/quizzical/src/index.js":"1","/Users/peko/Desktop/quizzical/src/App.js":"2","/Users/peko/Desktop/quizzical/src/component/Cover.js":"3","/Users/peko/Desktop/quizzical/src/component/Quiz.js":"4"},{"size":529,"mtime":1673352431620,"results":"5","hashOfConfig":"6"},{"size":3199,"mtime":1676018199662,"results":"7","hashOfConfig":"6"},{"size":335,"mtime":1673271240714,"results":"8","hashOfConfig":"6"},{"size":1926,"mtime":1675350134108,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"114agwg",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/peko/Desktop/quizzical/src/index.js",["24"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { decode } from 'html-entities';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","/Users/peko/Desktop/quizzical/src/App.js",["25"],[],"/Users/peko/Desktop/quizzical/src/component/Cover.js",[],[],"/Users/peko/Desktop/quizzical/src/component/Quiz.js",["26","27"],[],"import React from 'react';\nimport { decode } from 'html-entities';\nimport { nanoid } from 'nanoid';\n\n\n\nexport default function Quiz(props){\n    \n\n\n    const quizes = props.quizData.map(item => {\n        \n        return(\n            <div className='quiz-container'>\n                <h2 className='quiz-question'>{item.question}</h2>\n                <div className='quiz-ans-container'>\n                    {item.answers.map(ans => \n                    <button \n                        onClick={()=>props.handleClickAnswer(item.id, ans)} \n                        className={`${ props.showScore ?  \n                        ans === item.correct_answer ? \"quiz-ans correct_ans\" :\n                            ans === item.selected && ans !== item.correct_answer ? \"quiz-ans incorrect_ans\" : \"quiz-ans other_incorrect_ans\"\n                        : \n                        item.selected === ans ? \"quiz-ans selected\" : \"quiz-ans\" }`} \n                        // className={item.selected === ans ? \"quiz-ans selected\" : \"quiz-ans\"} \n                    >\n                        {ans}\n                    </button>)}\n                </div>\n                <hr />\n            </div>\n        )\n    })\n    console.log(props.allCheck)\n\n    return(\n        <div className='quizes-container'>\n            {quizes}\n            \n            {props.showScore ? \n            <div className='quiz-score-container'>\n                <h3>You scored {props.score}/10 correct answer</h3>\n                <button className=\"btn\" onClick={props.playAgain}>Play again</button>\n            </div> : \n            <div className='quiz-check-answer-container'>\n                <button className='btn' onClick={props.checkScore}>Check Answer</button>\n                {/* check if every question is answered */}\n                {props.allCheck === false && <p>*** Please answer every question ***</p>}\n            </div>\n            }\n        </div>\n    )\n}\n",{"ruleId":"28","severity":1,"message":"29","line":5,"column":10,"nodeType":"30","messageId":"31","endLine":5,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":7,"column":10,"nodeType":"30","messageId":"31","endLine":7,"endColumn":17},{"ruleId":"28","severity":1,"message":"29","line":2,"column":10,"nodeType":"30","messageId":"31","endLine":2,"endColumn":16},{"ruleId":"28","severity":1,"message":"33","line":3,"column":10,"nodeType":"30","messageId":"31","endLine":3,"endColumn":16},"no-unused-vars","'decode' is defined but never used.","Identifier","unusedVar","'queries' is defined but never used.","'nanoid' is defined but never used."]